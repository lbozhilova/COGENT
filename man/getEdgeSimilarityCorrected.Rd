% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/networkSimilarity.R
\name{getEdgeSimilarityCorrected}
\alias{getEdgeSimilarityCorrected}
\title{Edge the edge similarity of two networks with configuration model correction}
\usage{
getEdgeSimilarityCorrected(A, align = FALSE, type = c("random",
  "expected"))
}
\arguments{
\item{A}{A list of two square \strong{unweighted} adjacency matrices.}

\item{align}{Logical; Whether to align the two adjacency matrices. Only set
to TRUE if this is not done automatically.}

\item{type}{How to do the correction: either by generating random networks
from the configuartion model or by using expectations. Must be one of
"random" or "expected".}
}
\value{
The result is a list of two elements: \itemize{ \item
  \code{nodeCount} The number of non-isolated genes across the two networks.
  \item \code{correctedSimilarity} The weighted Jaccard index of the edge
  sets of the two networks, corrected using the generated configuration model
  networks. } The corrected similarity corresponds to the global similarity
  in \link{getEdgeSimilarity}. The correction is done by generating two
  networks using the permuted degree sequence of the networks in \code{A}.
  These random networks are then overlapped to give a measure of the possible
  random overlap. The global similarity is corrected by removing the
  random overlap from the numerator and addding it to the denominator of the
  corresponging Jaccard index.
}
\description{
Edge similarity as defined in \link{getEdgeSimilarity} is not corrected for
the density of the two networks. This means denser networks are more likely
to exhibit higher similarity than sparser ones, even when their overlap is
essentially random. The \code{getEdgeSimilarityCorrected()} function
introduces a density correction by considering the random overlap of networks
generated by the confiduration model with degree sequences matching the
input.
}
\examples{
# Generate two adjacency matrices
A1 <- matrix(0, ncol=10, nrow=10); A2 <- matrix(0, ncol=10, nrow=10)
A1[upper.tri(A1)] <- rbinom(45, 1, .2); A1 <- A1+t(A1)
A2[upper.tri(A1)] <- rbinom(45, 1, .4); A2 <- A2+t(A2)
colnames(A1) <- rownames(A1) <- LETTERS[1:10]
colnames(A2) <- rownames(A2) <- LETTERS[6:15]
# Calculate their corrected global similarity using random networks
getEdgeSimilarityCorrected(list(A1, A2), align=TRUE, type="random")
# Calculate their corrected global similarity using expectations
getEdgeSimilarityCorrected(list(A1, A2), align=TRUE, type="expected")

}
